// Generated by Dagger (https://dagger.dev).
package com.example.currencieslist.di;

import com.example.currencieslist.rates.ImageResolver;
import com.example.currencieslist.rates.RateItemPresenter;
import com.example.currencieslist.rates.RateItemPresenter_Factory;
import com.example.currencieslist.rates.RatesActivity;
import com.example.currencieslist.rates.RatesActivity_MembersInjector;
import com.example.currencieslist.rates.RatesAdapter;
import com.example.currencieslist.rates.RatesInteractor;
import com.example.currencieslist.rates.RatesInteractor_Factory;
import com.example.currencieslist.rates.RatesPresenter;
import com.example.currencieslist.rates.di.RatesModule;
import com.example.currencieslist.rates.di.RatesModule_ProvideTestApiFactory;
import com.example.currencieslist.rates.network.RatesGateway;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<RatesGateway> provideTestApiProvider;

  private Provider<RatesInteractor> ratesInteractorProvider;

  private Provider<RateItemPresenter> rateItemPresenterProvider;

  private DaggerAppComponent(RatesModule ratesModuleParam) {

    initialize(ratesModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static AppComponent create() {
    return new Builder().build();
  }

  private RatesPresenter getRatesPresenter() {
    return new RatesPresenter(ratesInteractorProvider.get(), new ImageResolver());}

  private RatesAdapter getRatesAdapter() {
    return new RatesAdapter(rateItemPresenterProvider);}

  @SuppressWarnings("unchecked")
  private void initialize(final RatesModule ratesModuleParam) {
    this.provideTestApiProvider = DoubleCheck.provider(RatesModule_ProvideTestApiFactory.create(ratesModuleParam));
    this.ratesInteractorProvider = DoubleCheck.provider(RatesInteractor_Factory.create(provideTestApiProvider));
    this.rateItemPresenterProvider = RateItemPresenter_Factory.create(ratesInteractorProvider);
  }

  @Override
  public void inject(RatesActivity target) {
    injectRatesActivity(target);}

  private RatesActivity injectRatesActivity(RatesActivity instance) {
    RatesActivity_MembersInjector.injectPresenter(instance, getRatesPresenter());
    RatesActivity_MembersInjector.injectRatesAdapter(instance, getRatesAdapter());
    return instance;
  }

  public static final class Builder {
    private RatesModule ratesModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder ratesModule(RatesModule ratesModule) {
      this.ratesModule = Preconditions.checkNotNull(ratesModule);
      return this;
    }

    public AppComponent build() {
      if (ratesModule == null) {
        this.ratesModule = new RatesModule();
      }
      return new DaggerAppComponent(ratesModule);
    }
  }
}
